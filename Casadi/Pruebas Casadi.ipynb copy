{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [],
   "source": [
    "from casadi import *\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = MX.sym(\"x\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "MX(x)"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "y = SX.sym('y',5)\n",
    "Z = SX.sym('Z',4,2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX([y_0, y_1, y_2, y_3, y_4])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX(\n",
       "[[Z_0, Z_4], \n",
       " [Z_1, Z_5], \n",
       " [Z_2, Z_6], \n",
       " [Z_3, Z_7]])"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "Z"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX(@1=0, \n",
       "[[@1, @1, @1, @1, @1], \n",
       " [@1, @1, @1, @1, @1], \n",
       " [@1, @1, @1, @1, @1], \n",
       " [@1, @1, @1, @1, @1]])"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SX.zeros(4,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX(\n",
       "[[00, 00, 00, 00, 00], \n",
       " [00, 00, 00, 00, 00], \n",
       " [00, 00, 00, 00, 00], \n",
       " [00, 00, 00, 00, 00]])"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SX(4,5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX(@1=1, \n",
       "[[@1, 00, 00, 00], \n",
       " [00, @1, 00, 00], \n",
       " [00, 00, @1, 00], \n",
       " [00, 00, 00, @1]])"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SX.eye(4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SX(\n",
       "[[1, 2], \n",
       " [3, 4]])"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "SX([[1,2],[3,4]])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "@1=3, \n",
      "[[((@1*x_0)+y), ((@1*x_2)+y)], \n",
      " [((@1*x_1)+y), ((@1*x_3)+y)]]\n",
      "(2, 2)\n"
     ]
    }
   ],
   "source": [
    "x = SX.sym('x',2,2)\n",
    "y = SX.sym('y')\n",
    "f = 3*x + y\n",
    "print(f)\n",
    "print(f.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[(sq(x_0)+(x_2*x_1)), ((x_0*x_2)+(x_2*x_3))], \n",
      " [((x_1*x_0)+(x_3*x_1)), ((x_1*x_2)+sq(x_3))]]\n"
     ]
    }
   ],
   "source": [
    "print(x@x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "((3*x)+y)\n",
      "(2, 2)\n"
     ]
    }
   ],
   "source": [
    "x = MX.sym('x',2,2)\n",
    "y = MX.sym('y')\n",
    "f = 3*x + y\n",
    "print(f)\n",
    "print(f.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "mac(x,x,zeros(2x2))\n"
     ]
    }
   ],
   "source": [
    "print(x@x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[x_0, 00, 00], \n",
      " [x_1, x_3, 00], \n",
      " [x_2, x_4, x_5]]\n"
     ]
    }
   ],
   "source": [
    "print(SX.sym('x',Sparsity.lower(3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3x3,6nz\n"
     ]
    }
   ],
   "source": [
    "print(Sparsity.lower(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3, 7]] \n",
      "\n",
      "@1=1.34234, \n",
      "[[@1, @1], \n",
      " [4, 5]]\n"
     ]
    }
   ],
   "source": [
    "M = SX([[3,7],[4,5]])\n",
    "print(M[0,:], '\\n')\n",
    "\n",
    "M[0,:] = 1.342341413\n",
    "print(M)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(A\\b)\n"
     ]
    }
   ],
   "source": [
    "A = MX.sym('A',3,3)\n",
    "b = MX.sym('b',3)\n",
    "print(solve(A,b))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[((A_0*x_0)+(A_3*x_1)), ((A_1*x_0)+(A_4*x_1)), ((A_2*x_0)+(A_5*x_1))]\n"
     ]
    }
   ],
   "source": [
    "A = SX.sym('A',3,2)\n",
    "x = SX.sym('x',2)\n",
    "print(A@x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[A_0, A_3], \n",
      " [A_1, A_4], \n",
      " [A_2, A_5]]\n"
     ]
    }
   ],
   "source": [
    "print(jacobian(A@x,x))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Derivadas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[A_0, A_3], \n",
      " [A_1, A_4], \n",
      " [A_2, A_5]]\n"
     ]
    }
   ],
   "source": [
    "A = SX.sym('A',3,2)\n",
    "x = SX.sym('x',2)\n",
    "print(jacobian(A@x,x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[((A_0*x_0)+(A_3*x_1)), ((A_1*x_0)+(A_4*x_1)), ((A_2*x_0)+(A_5*x_1))]\n"
     ]
    }
   ],
   "source": [
    "print(A@x)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(((((sq(A_0)+sq(A_1))+sq(A_2))+sq(A_3))+sq(A_4))+sq(A_5))\n"
     ]
    }
   ],
   "source": [
    "print(dot(A,A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "[[(A_0+A_0), (A_3+A_3)], \n",
      " [(A_1+A_1), (A_4+A_4)], \n",
      " [(A_2+A_2), (A_5+A_5)]]\n"
     ]
    }
   ],
   "source": [
    "print(gradient(dot(A,A),A))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(sq(x_0)+sq(x_1))\n"
     ]
    }
   ],
   "source": [
    "print(dot(x,x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(x_0+x_0), (x_1+x_1)]\n"
     ]
    }
   ],
   "source": [
    "print(gradient(dot(x,x),x))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H: @1=2, \n",
      "[[@1, 00], \n",
      " [00, @1]]\n"
     ]
    }
   ],
   "source": [
    "[H,g] = hessian(dot(x,x),x)\n",
    "print('H:', H)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(v_0+(3*v_1)), ((4*v_0)+(7*v_1)), ((2*v_0)+(8*v_1))]\n"
     ]
    }
   ],
   "source": [
    "A = DM([[1,3],[4,7],[2,8]])\n",
    "x = SX.sym('x',2)\n",
    "v = SX.sym('v',2)\n",
    "f = mtimes(A,x)\n",
    "print(jtimes(f,x,v))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[(((2*w_2)+(4*w_1))+w_0), (((8*w_2)+(7*w_1))+(3*w_0))]\n"
     ]
    }
   ],
   "source": [
    "w = SX.sym('w',3)\n",
    "f = mtimes(A,x)\n",
    "print(jtimes(f,x,w,True))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Funciones"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f:(i0[2],i1)->(o0[2],o1[2]) SXFunction\n"
     ]
    }
   ],
   "source": [
    "x = SX.sym('x',2)\n",
    "y = SX.sym('y')\n",
    "f = Function('f',[x,y],[x,sin(y)*x])\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f:(i0[2],i1)->(o0[2],o1[2]) MXFunction\n"
     ]
    }
   ],
   "source": [
    "x = MX.sym('x',2)\n",
    "y = MX.sym('y')\n",
    "f = Function('f',[x,y],[x,sin(y)*x])\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f:(x[2],y)->(r[2],q[2]) MXFunction\n"
     ]
    }
   ],
   "source": [
    "f = Function('f',[x,y], [x,sin(y)*x], ['x','y'],['r','q'])\n",
    "print(f)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "r0: [1.1, 1.1]\n",
      "q0: [-0.17352, -0.17352]\n"
     ]
    }
   ],
   "source": [
    "r0, q0 = f(1.1,3.3)\n",
    "print('r0:',r0)\n",
    "print('q0:',q0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "res: {'q': DM([-0.17352, -0.17352]), 'r': DM([1.1, 1.1])}\n"
     ]
    }
   ],
   "source": [
    "res = f(x=1.1, y=3.3)\n",
    "print('res:', res)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "res: [DM([1.1, 1.1]), DM([-0.17352, -0.17352])]\n",
      "res: {'q': DM([-0.17352, -0.17352]), 'r': DM([1.1, 1.1])}\n"
     ]
    }
   ],
   "source": [
    "arg = [1.1,3.3]\n",
    "res = f.call(arg)\n",
    "print('res:', res)\n",
    "arg = {'x':1.1,'y':3.3}\n",
    "res = f.call(arg)\n",
    "print('res:', res)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nonlinear root finding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "G:(i0,i1)->(o0,o1) Newton\n"
     ]
    }
   ],
   "source": [
    "nz = 1\n",
    "nx = 1\n",
    "z = SX.sym('x',nz)\n",
    "x = SX.sym('x',nx)\n",
    "g0 = sin(x+z)\n",
    "g1 = cos(x-z)\n",
    "g = Function('g',[z,x],[g0,g1])\n",
    "G = rootfinder('G','newton',g)\n",
    "print(G)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initial-value problems and sensitivity analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F:(x0,p,z0,rx0[0],rp[0],rz0[0])->(xf,qf[0],zf,rxf[0],rqf[0],rzf[0]) IdasInterface\n"
     ]
    }
   ],
   "source": [
    "x = SX.sym('x'); z = SX.sym('z'); p = SX.sym('p')\n",
    "dae = {'x':x, 'z':z, 'p':p, 'ode':z+p, 'alg':z*cos(z)-x}\n",
    "F = integrator('F', 'idas', dae)\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.1724\n"
     ]
    }
   ],
   "source": [
    "r = F(x0=0, z0=0, p=0.1)\n",
    "print(r['xf'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Non Linear Programming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S:(x0[3],p[],lbx[3],ubx[3],lbg,ubg,lam_x0[3],lam_g0)->(x[3],f,g,lam_x[3],lam_g,lam_p[]) IpoptInterface\n"
     ]
    }
   ],
   "source": [
    "x = SX.sym('x'); y = SX.sym('y'); z = SX.sym('z')\n",
    "nlp = {'x':vertcat(x,y,z), 'f':x**2+100*z**2, 'g':z+(1-x)**2-y}\n",
    "S = nlpsol('S', 'ipopt', nlp)\n",
    "print(S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "******************************************************************************\n",
      "This program contains Ipopt, a library for large-scale nonlinear optimization.\n",
      " Ipopt is released as open source code under the Eclipse Public License (EPL).\n",
      "         For more information visit http://projects.coin-or.org/Ipopt\n",
      "******************************************************************************\n",
      "\n",
      "This is Ipopt version 3.12.3, running with linear solver mumps.\n",
      "NOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n",
      "\n",
      "Number of nonzeros in equality constraint Jacobian...:        3\n",
      "Number of nonzeros in inequality constraint Jacobian.:        0\n",
      "Number of nonzeros in Lagrangian Hessian.............:        2\n",
      "\n",
      "Total number of variables............................:        3\n",
      "                     variables with only lower bounds:        0\n",
      "                variables with lower and upper bounds:        0\n",
      "                     variables with only upper bounds:        0\n",
      "Total number of equality constraints.................:        1\n",
      "Total number of inequality constraints...............:        0\n",
      "        inequality constraints with only lower bounds:        0\n",
      "   inequality constraints with lower and upper bounds:        0\n",
      "        inequality constraints with only upper bounds:        0\n",
      "\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "   0  6.2500000e+01 0.00e+00 9.00e+01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n",
      "   1  1.8457621e+01 1.48e-02 4.10e+01  -1.0 4.10e-01   2.0 1.00e+00 1.00e+00f  1\n",
      "   2  7.8031530e+00 3.84e-03 8.76e+00  -1.0 2.63e-01   1.5 1.00e+00 1.00e+00f  1\n",
      "   3  7.1678278e+00 9.42e-05 1.04e+00  -1.0 9.32e-02   1.0 1.00e+00 1.00e+00f  1\n",
      "   4  6.7419924e+00 6.18e-03 9.95e-01  -1.0 2.69e-01   0.6 1.00e+00 1.00e+00f  1\n",
      "   5  5.4363330e+00 7.03e-02 1.04e+00  -1.7 8.40e-01   0.1 1.00e+00 1.00e+00f  1\n",
      "   6  1.2144815e+00 1.52e+00 1.32e+00  -1.7 3.21e+00  -0.4 1.00e+00 1.00e+00f  1\n",
      "   7  1.0214718e+00 2.51e-01 1.17e+01  -1.7 1.33e+00   0.9 1.00e+00 1.00e+00h  1\n",
      "   8  3.1864085e-01 1.04e-03 7.53e-01  -1.7 3.58e-01    -  1.00e+00 1.00e+00f  1\n",
      "   9  0.0000000e+00 3.19e-01 0.00e+00  -1.7 5.64e-01    -  1.00e+00 1.00e+00f  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  10  0.0000000e+00 0.00e+00 0.00e+00  -1.7 3.19e-01    -  1.00e+00 1.00e+00h  1\n",
      "\n",
      "Number of Iterations....: 10\n",
      "\n",
      "                                   (scaled)                 (unscaled)\n",
      "Objective...............:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Dual infeasibility......:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Constraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Complementarity.........:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Overall NLP error.......:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "\n",
      "\n",
      "Number of objective function evaluations             = 11\n",
      "Number of objective gradient evaluations             = 11\n",
      "Number of equality constraint evaluations            = 11\n",
      "Number of inequality constraint evaluations          = 0\n",
      "Number of equality constraint Jacobian evaluations   = 11\n",
      "Number of inequality constraint Jacobian evaluations = 0\n",
      "Number of Lagrangian Hessian evaluations             = 10\n",
      "Total CPU secs in IPOPT (w/o function evaluations)   =      0.010\n",
      "Total CPU secs in NLP function evaluations           =      0.000\n",
      "\n",
      "EXIT: Optimal Solution Found.\n",
      "           S  :   t_proc      (avg)   t_wall      (avg)    n_eval\n",
      "       nlp_f  |  22.00us (  2.00us)  22.00us (  2.00us)        11\n",
      "       nlp_g  |  29.00us (  2.64us)  29.00us (  2.64us)        11\n",
      "  nlp_grad_f  |  31.00us (  2.58us)  28.00us (  2.33us)        12\n",
      "  nlp_hess_l  |  21.00us (  2.10us)  23.00us (  2.30us)        10\n",
      "   nlp_jac_g  |  23.00us (  1.92us)  24.00us (  2.00us)        12\n",
      "       total  |  16.72ms ( 16.72ms)  30.64ms ( 30.64ms)         1\n",
      "x_opt:  [0, 1, 0]\n"
     ]
    }
   ],
   "source": [
    "r = S(x0=[2.5,3.0,0.75],\\\n",
    "      lbg=0, ubg=0)\n",
    "x_opt = r['x']\n",
    "print('x_opt: ', x_opt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Quadratic programming"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "S:(x0[2],p[],lbx[2],ubx[2],lbg,ubg,lam_x0[2],lam_g0)->(x[2],f,g,lam_x[2],lam_g,lam_p[]) MXFunction\n"
     ]
    }
   ],
   "source": [
    "x = SX.sym('x'); y = SX.sym('y')\n",
    "qp = {'x':vertcat(x,y), 'f':x**2+y**2, 'g':x+y-10}\n",
    "S = qpsol('S', 'qpoases', qp)\n",
    "print(S)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "####################   qpOASES  --  QP NO.   1   #####################\n",
      "\n",
      "    Iter   |    StepLength    |       Info       |   nFX   |   nAC    \n",
      " ----------+------------------+------------------+---------+--------- \n",
      "       0   |   1.866661e-07   |   ADD CON    0   |     1   |     1   \n",
      "       1   |   8.333622e-10   |   REM BND    1   |     0   |     1   \n",
      "       2   |   1.000000e+00   |    QP SOLVED     |     0   |     1   \n",
      "x_opt:  [5, 5]\n"
     ]
    }
   ],
   "source": [
    "r = S(lbg=0)\n",
    "x_opt = r['x']\n",
    "print('x_opt: ', x_opt)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## For-loop equivalents"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "f:(x)->(r) SXFunction\n",
      "F:(i0[1x4])->(o0[1x4]) MXFunction\n"
     ]
    }
   ],
   "source": [
    "N = 4\n",
    "X = MX.sym(\"X\",1,N)\n",
    "f = Function('f',[x,], [sin(x)*x], ['x',],['r',])\n",
    "\n",
    "print(f)\n",
    "\n",
    "ys = []\n",
    "for i in range(N):\n",
    "    ys.append(f(X[:,i]))\n",
    "\n",
    "Y = hcat(ys)\n",
    "F = Function('F',[X],[Y])\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "map4_f:(x[1x4])->(r[1x4]) Map\n"
     ]
    }
   ],
   "source": [
    "F = f.map(N)\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "threadmap2_map2_f:(x[1x4])->(r[1x4]) ThreadMap\n"
     ]
    }
   ],
   "source": [
    "F = f.map(N,\"thread\",2)\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "F:(i0)->(o0) MXFunction\n"
     ]
    }
   ],
   "source": [
    "x0 = MX.sym(\"x0\")\n",
    "x = x0\n",
    "for i in range(N):\n",
    "    x = f(x)\n",
    "\n",
    "F = Function('F',[x0],[x])\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fold_f:(x)->(r) MXFunction\n"
     ]
    }
   ],
   "source": [
    "F = f.fold(N)\n",
    "print(F)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Optimal control with CasADi\n",
    "$$\n",
    "\\begin{split}\\begin{array}{lc}\n",
    "\\begin{array}{l}\n",
    "\\text{minimize:} \\\\\n",
    "x(\\cdot) \\in \\mathbb{R}^2, \\, u(\\cdot) \\in \\mathbb{R}\n",
    "\\end{array}\n",
    "\\quad \\displaystyle \\int_{t=0}^{T}{(x_0^2 + x_1^2 + u^2) \\, dt}\n",
    "\\\\\n",
    "\\\\\n",
    "\\text{subject to:} \\\\\n",
    "\\\\\n",
    "\\begin{array}{ll}\n",
    "\\left\\{\n",
    "\\begin{array}{l}\n",
    "\\dot{x}_0 = (1-x_1^2) \\, x_0 - x_1 + u \\\\\n",
    "\\dot{x}_1 = x_0 \\\\\n",
    "-1.0 \\le u \\le 1.0, \\quad x_1 \\ge -0.25\n",
    "\\end{array} \\right. & \\text{for} \\, 0 \\le t \\le T \\\\\n",
    "x_0(0)=0, \\quad x_1(0)=1,\n",
    "\\end{array}\n",
    "\\end{array}\\end{split}\n",
    "$$\n",
    "with $T=10$."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Direct single-shooting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.235378, 0.32721]\n",
      "0.0382084\n",
      "This is Ipopt version 3.12.3, running with linear solver mumps.\n",
      "NOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n",
      "\n",
      "Number of nonzeros in equality constraint Jacobian...:        0\n",
      "Number of nonzeros in inequality constraint Jacobian.:     3240\n",
      "Number of nonzeros in Lagrangian Hessian.............:     3240\n",
      "\n",
      "Total number of variables............................:       80\n",
      "                     variables with only lower bounds:        0\n",
      "                variables with lower and upper bounds:       80\n",
      "                     variables with only upper bounds:        0\n",
      "Total number of equality constraints.................:        0\n",
      "Total number of inequality constraints...............:       80\n",
      "        inequality constraints with only lower bounds:       80\n",
      "   inequality constraints with lower and upper bounds:        0\n",
      "        inequality constraints with only upper bounds:        0\n",
      "\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "   0  3.6096823e+01 2.43e+00 7.03e-01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n",
      "   1  3.4430784e+01 2.35e+00 5.18e+00  -1.0 5.60e+00    -  1.52e-01 2.90e-02h  1\n",
      "   2  2.7424297e+01 2.01e+00 7.28e+00  -1.0 7.54e+00    -  1.63e-01 1.11e-01f  1\n",
      "   3  2.6994623e+01 1.99e+00 1.18e+01  -1.0 8.04e+00    -  1.34e-02 1.01e-02h  1\n",
      "   4  2.5413434e+01 1.90e+00 8.33e+00  -1.0 8.94e+00    -  9.92e-03 3.37e-02f  1\n",
      "   5  2.5204134e+01 1.89e+00 3.51e+01  -1.0 1.50e+01    -  1.21e-02 5.67e-03h  1\n",
      "   6  2.4523358e+01 1.86e+00 5.15e+01  -1.0 1.39e+01    -  3.05e-04 1.48e-02h  1\n",
      "   7  2.3727009e+01 1.83e+00 6.76e+01  -1.0 3.49e+01    -  6.39e-03 1.37e-02f  1\n",
      "   8  2.3682340e+01 1.83e+00 2.10e+01  -1.0 2.88e+01    -  3.83e-03 1.71e-03h  1\n",
      "   9  2.2429014e+01 1.79e+00 7.18e+01  -1.0 5.71e+01    -  1.61e-04 1.38e-02f  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  10  2.2398162e+01 1.79e+00 2.89e+02  -1.0 1.60e+01    -  1.06e-02 9.31e-04h  1\n",
      "  11  2.2297022e+01 1.78e+00 2.50e+02  -1.0 2.16e+01    -  1.62e-04 2.00e-03h  1\n",
      "  12  2.2282593e+01 1.78e+00 6.52e+03  -1.0 2.72e+01    -  6.38e-02 6.62e-04h  1\n",
      "  13  2.2223697e+01 1.78e+00 2.15e+05  -1.0 2.73e+01    -  1.01e-01 2.84e-03h  1\n",
      "  14  2.2221055e+01 1.78e+00 9.85e+07  -1.0 8.61e+00    -  4.96e-02 9.00e-05h  1\n",
      "  15  2.2220425e+01 1.78e+00 1.53e+11  -1.0 3.45e+00    -  3.02e-02 1.87e-05h  1\n",
      "  16r 2.2220425e+01 1.78e+00 1.00e+03   0.3 0.00e+00    -  0.00e+00 3.58e-07R  2\n",
      "  17r 2.0421781e+01 1.61e+00 1.02e+03   0.3 6.33e+02    -  3.82e-03 4.67e-04f  1\n",
      "  18r 2.0421781e+01 1.61e+00 9.99e+02   0.2 0.00e+00    -  0.00e+00 3.71e-07R  3\n",
      "  19r 1.2294762e+01 7.88e-01 9.97e+02   0.2 4.38e+02    -  3.41e-03 1.42e-03f  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  20  1.2123918e+01 7.78e-01 2.16e+01  -1.0 1.17e+00    -  2.03e-02 1.01e-02f  1\n",
      "  21  1.1771430e+01 7.55e-01 2.13e+01  -1.0 1.75e+00    -  1.10e-02 1.92e-02f  1\n",
      "  22  1.0399849e+01 6.56e-01 2.09e+01  -1.0 1.61e+00    -  3.14e-02 7.91e-02f  1\n",
      "  23  9.8090895e+00 4.91e-01 1.43e+01  -1.0 1.01e+00    -  2.63e-01 2.12e-01f  1\n",
      "  24  8.7297885e+00 4.52e-01 1.60e+01  -1.0 6.10e-01    -  2.57e-01 1.14e-01f  1\n",
      "  25  7.0026275e+00 3.53e-01 1.19e+01  -1.0 1.35e+00    -  3.31e-01 2.82e-01f  1\n",
      "  26  6.6730615e+00 5.39e-01 2.17e+01  -1.0 5.19e-01    -  2.37e-01 9.15e-01f  1\n",
      "  27  6.8303751e+00 4.55e-02 4.16e+01  -1.0 1.37e+00    -  1.75e-01 3.19e-01h  1\n",
      "  28  7.7549338e+00 7.29e-01 1.55e+01  -1.0 1.28e+00    -  2.85e-01 9.49e-01f  1\n",
      "  29  5.3714597e+00 0.00e+00 1.38e+01  -1.0 1.13e+00   0.0 4.34e-01 5.19e-01f  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  30  4.2052139e+00 4.06e-03 4.50e+00  -1.0 1.16e+00  -0.5 3.14e-01 3.47e-01f  1\n",
      "  31  4.8125540e+00 0.00e+00 1.97e+00  -1.0 3.42e-01    -  7.77e-01 1.00e+00f  1\n",
      "  32  4.8881045e+00 0.00e+00 1.28e-01  -1.0 1.28e-01    -  1.00e+00 1.00e+00h  1\n",
      "  33  4.1429858e+00 0.00e+00 9.00e-01  -2.5 1.50e-01    -  8.58e-01 1.00e+00f  1\n",
      "  34  3.7752332e+00 0.00e+00 1.97e+00  -2.5 1.56e-01    -  1.00e+00 1.00e+00h  1\n",
      "  35  3.6932284e+00 0.00e+00 1.75e-01  -2.5 4.65e-02    -  1.00e+00 1.00e+00h  1\n",
      "  36  3.6787138e+00 0.00e+00 1.03e-02  -2.5 1.48e-02    -  1.00e+00 1.00e+00h  1\n",
      "  37  3.6323438e+00 3.07e-06 1.00e-01  -3.8 3.17e-02    -  9.93e-01 9.71e-01h  1\n",
      "  38  3.6243046e+00 0.00e+00 4.87e-03  -3.8 9.84e-03    -  1.00e+00 1.00e+00h  1\n",
      "  39  3.6239975e+00 0.00e+00 5.32e-05  -3.8 4.86e-03    -  1.00e+00 1.00e+00h  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  40  3.6208666e+00 3.08e-09 8.02e-04  -5.7 5.33e-03    -  1.00e+00 9.84e-01h  1\n",
      "  41  3.6207631e+00 0.00e+00 1.04e-05  -5.7 5.09e-03    -  1.00e+00 1.00e+00h  1\n",
      "  42  3.6207264e+00 9.73e-11 3.61e-04  -8.6 2.52e-03    -  9.96e-01 9.36e-01h  1\n",
      "  43  3.6207238e+00 0.00e+00 8.21e-08  -8.6 8.20e-04    -  1.00e+00 1.00e+00f  1\n",
      "  44  3.6207238e+00 0.00e+00 5.48e-10  -8.6 7.13e-05    -  1.00e+00 1.00e+00h  1\n",
      "\n",
      "Number of Iterations....: 44\n",
      "\n",
      "                                   (scaled)                 (unscaled)\n",
      "Objective...............:   3.6207238300426905e+00    3.6207238300426905e+00\n",
      "Dual infeasibility......:   5.4807449730707209e-10    5.4807449730707209e-10\n",
      "Constraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Complementarity.........:   4.2687128882380504e-09    4.2687128882380504e-09\n",
      "Overall NLP error.......:   4.2687128882380504e-09    4.2687128882380504e-09\n",
      "\n",
      "\n",
      "Number of objective function evaluations             = 50\n",
      "Number of objective gradient evaluations             = 45\n",
      "Number of equality constraint evaluations            = 0\n",
      "Number of inequality constraint evaluations          = 50\n",
      "Number of equality constraint Jacobian evaluations   = 0\n",
      "Number of inequality constraint Jacobian evaluations = 47\n",
      "Number of Lagrangian Hessian evaluations             = 44\n",
      "Total CPU secs in IPOPT (w/o function evaluations)   =      0.118\n",
      "Total CPU secs in NLP function evaluations           =      2.375\n",
      "\n",
      "EXIT: Optimal Solution Found.\n",
      "      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval\n",
      "       nlp_f  |  45.19ms (903.84us)  45.23ms (904.58us)        50\n",
      "       nlp_g  |  46.40ms (927.98us)  46.42ms (928.42us)        50\n",
      "  nlp_grad_f  | 138.29ms (  3.01ms) 138.19ms (  3.00ms)        46\n",
      "  nlp_hess_l  |   1.80 s ( 42.97ms)   1.80 s ( 42.95ms)        42\n",
      "   nlp_jac_g  | 361.43ms (  7.53ms) 361.20ms (  7.53ms)        48\n",
      "       total  |   2.52 s (  2.52 s)   2.52 s (  2.52 s)         1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "T = 10. # Time horizon\n",
    "N = 80 # number of control intervals\n",
    "\n",
    "# Declare model variables\n",
    "x1 = MX.sym('x1')\n",
    "x2 = MX.sym('x2')\n",
    "x = vertcat(x1, x2)\n",
    "u = MX.sym('u')\n",
    "\n",
    "# Model equations\n",
    "xdot = vertcat((1-x2**2)*x1 - x2 + u, x1)\n",
    "\n",
    "# Objective term\n",
    "L = x1**2 + x2**2 + u**2\n",
    "\n",
    "# Formulate discrete time dynamics\n",
    "if False:\n",
    "    # CVODES from the SUNDIALS suite\n",
    "    dae = {'x':x, 'p':u, 'ode':xdot, 'quad':L}\n",
    "    opts = {'tf':T/N}\n",
    "    F = integrator('F', 'cvodes', dae, opts)\n",
    "else:\n",
    "    # Fixed step Runge-Kutta 4 integrator\n",
    "    M = 4 # RK4 steps per interval\n",
    "    DT = T/N/M\n",
    "    f = Function('f', [x, u], [xdot, L])\n",
    "    X0 = MX.sym('X0', 2)\n",
    "    U = MX.sym('U')\n",
    "    X = X0\n",
    "    Q = 0\n",
    "    for j in range(M):\n",
    "        k1, k1_q = f(X, U)\n",
    "        k2, k2_q = f(X + DT/2 * k1, U)\n",
    "        k3, k3_q = f(X + DT/2 * k2, U)\n",
    "        k4, k4_q = f(X + DT * k3, U)\n",
    "        X=X+DT/6*(k1 +2*k2 +2*k3 +k4)\n",
    "        Q = Q + DT/6*(k1_q + 2*k2_q + 2*k3_q + k4_q)\n",
    "    F = Function('F', [X0, U], [X, Q],['x0','p'],['xf','qf'])\n",
    "\n",
    "# Evaluate at a test point\n",
    "Fk = F(x0=[0.2,0.3],p=0.4)\n",
    "print(Fk['xf'])\n",
    "print(Fk['qf'])\n",
    "\n",
    "# Start with an empty NLP\n",
    "w=[]\n",
    "w0 = []\n",
    "lbw = []\n",
    "ubw = []\n",
    "J = 0\n",
    "g=[]\n",
    "lbg = []\n",
    "ubg = []\n",
    "\n",
    "# Formulate the NLP\n",
    "Xk = MX([0, 1])\n",
    "for k in range(N):\n",
    "    # New NLP variable for the control\n",
    "    Uk = MX.sym('U_' + str(k))\n",
    "    w += [Uk]\n",
    "    lbw += [-1]\n",
    "    ubw += [1]\n",
    "    w0 += [0]\n",
    "\n",
    "    # Integrate till the end of the interval\n",
    "    Fk = F(x0=Xk, p=Uk)\n",
    "    Xk = Fk['xf']\n",
    "    J=J+Fk['qf']\n",
    "\n",
    "    # Add inequality constraint\n",
    "    g += [Xk[0]]\n",
    "    lbg += [-.25]\n",
    "    ubg += [inf]\n",
    "\n",
    "# Create an NLP solver\n",
    "prob = {'f': J, 'x': vertcat(*w), 'g': vertcat(*g)}\n",
    "solver = nlpsol('solver', 'ipopt', prob)\n",
    "\n",
    "# Solve the NLP\n",
    "sol = solver(x0=w0, lbx=lbw, ubx=ubw, lbg=lbg, ubg=ubg)\n",
    "w_opt = sol['x']\n",
    "\n",
    "# Plot the solution\n",
    "u_opt = w_opt\n",
    "x_opt = [[0, 1]]\n",
    "for k in range(N):\n",
    "    Fk = F(x0=x_opt[-1], p=u_opt[k])\n",
    "    x_opt += [Fk['xf'].full()]\n",
    "x1_opt = [r[0] for r in x_opt]\n",
    "x2_opt = [r[1] for r in x_opt]\n",
    "\n",
    "tgrid = [T/N*k for k in range(N+1)]\n",
    "\n",
    "\n",
    "plt.figure(1)\n",
    "plt.clf()\n",
    "plt.plot(tgrid, x1_opt, '--')\n",
    "plt.plot(tgrid, x2_opt, '-')\n",
    "plt.step(tgrid, vertcat(DM.nan(1), u_opt), '-.')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['x1','x2','u'])\n",
    "plt.grid()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Direct multiple-shooting"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.335539, 0.434784]\n",
      "0.183287\n",
      "This is Ipopt version 3.12.3, running with linear solver mumps.\n",
      "NOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n",
      "\n",
      "Number of nonzeros in equality constraint Jacobian...:      156\n",
      "Number of nonzeros in inequality constraint Jacobian.:        0\n",
      "Number of nonzeros in Lagrangian Hessian.............:      115\n",
      "\n",
      "Total number of variables............................:       60\n",
      "                     variables with only lower bounds:       20\n",
      "                variables with lower and upper bounds:       20\n",
      "                     variables with only upper bounds:        0\n",
      "Total number of equality constraints.................:       40\n",
      "Total number of inequality constraints...............:        0\n",
      "        inequality constraints with only lower bounds:        0\n",
      "   inequality constraints with lower and upper bounds:        0\n",
      "        inequality constraints with only upper bounds:        0\n",
      "\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "   0  5.0098016e-01 8.76e-01 7.51e-01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n",
      "   1  1.3845259e+00 3.96e-01 3.84e-01  -1.7 1.12e+00    -  4.71e-01 5.47e-01h  1\n",
      "   2  2.6299477e+00 1.57e-01 4.10e-01  -1.7 4.93e-01    -  7.70e-01 6.04e-01h  1\n",
      "   3  3.8716210e+00 5.91e-03 3.72e-02  -1.7 1.84e-01    -  1.00e+00 1.00e+00h  1\n",
      "   4  3.7640019e+00 9.33e-05 5.91e-02  -2.5 4.61e-02    -  9.40e-01 1.00e+00h  1\n",
      "   5  3.7503306e+00 1.25e-05 9.36e-05  -2.5 1.37e-02    -  1.00e+00 1.00e+00h  1\n",
      "   6  3.7350543e+00 1.01e-05 8.91e-05  -3.8 1.17e-02    -  1.00e+00 1.00e+00f  1\n",
      "   7  3.7330679e+00 7.96e-07 5.18e-06  -5.7 4.12e-03    -  1.00e+00 1.00e+00h  1\n",
      "   8  3.7329818e+00 8.84e-09 7.13e-08  -5.7 6.25e-04    -  1.00e+00 1.00e+00h  1\n",
      "   9  3.7329694e+00 1.99e-11 1.75e-10  -8.6 2.21e-05    -  1.00e+00 1.00e+00h  1\n",
      "\n",
      "Number of Iterations....: 9\n",
      "\n",
      "                                   (scaled)                 (unscaled)\n",
      "Objective...............:   3.7329694107153943e+00    3.7329694107153943e+00\n",
      "Dual infeasibility......:   1.7472767677162437e-10    1.7472767677162437e-10\n",
      "Constraint violation....:   1.9875073808961474e-11    1.9875073808961474e-11\n",
      "Complementarity.........:   5.0072348300005349e-09    5.0072348300005349e-09\n",
      "Overall NLP error.......:   5.0072348300005349e-09    5.0072348300005349e-09\n",
      "\n",
      "\n",
      "Number of objective function evaluations             = 10\n",
      "Number of objective gradient evaluations             = 10\n",
      "Number of equality constraint evaluations            = 10\n",
      "Number of inequality constraint evaluations          = 0\n",
      "Number of equality constraint Jacobian evaluations   = 10\n",
      "Number of inequality constraint Jacobian evaluations = 0\n",
      "Number of Lagrangian Hessian evaluations             = 9\n",
      "Total CPU secs in IPOPT (w/o function evaluations)   =      0.010\n",
      "Total CPU secs in NLP function evaluations           =      0.047\n",
      "\n",
      "EXIT: Optimal Solution Found.\n",
      "      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval\n",
      "       nlp_f  |   2.23ms (223.50us)   2.23ms (223.50us)        10\n",
      "       nlp_g  |   2.29ms (228.60us)   2.29ms (229.00us)        10\n",
      "  nlp_grad_f  |   8.49ms (771.36us)   8.21ms (746.00us)        11\n",
      "  nlp_hess_l  |  23.20ms (  2.58ms)  23.44ms (  2.60ms)         9\n",
      "   nlp_jac_g  |  13.28ms (  1.21ms)  13.30ms (  1.21ms)        11\n",
      "       total  |  59.70ms ( 59.70ms)  59.30ms ( 59.30ms)         1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "T = 10. # Time horizon\n",
    "N = 20 # number of control intervals\n",
    "\n",
    "# Declare model variables\n",
    "x1 = MX.sym('x1')\n",
    "x2 = MX.sym('x2')\n",
    "x = vertcat(x1, x2)\n",
    "u = MX.sym('u')\n",
    "\n",
    "# Model equations\n",
    "xdot = vertcat((1-x2**2)*x1 - x2 + u, x1)\n",
    "\n",
    "# Objective term\n",
    "L = x1**2 + x2**2 + u**2\n",
    "\n",
    "# Formulate discrete time dynamics\n",
    "if False:\n",
    "    # CVODES from the SUNDIALS suite\n",
    "    dae = {'x':x, 'p':u, 'ode':xdot, 'quad':L}\n",
    "    opts = {'tf':T/N}\n",
    "    F = integrator('F', 'cvodes', dae, opts)\n",
    "else:\n",
    "    # Fixed step Runge-Kutta 4 integrator\n",
    "    M = 4 # RK4 steps per interval\n",
    "    DT = T/N/M\n",
    "    f = Function('f', [x, u], [xdot, L])\n",
    "    X0 = MX.sym('X0', 2)\n",
    "    U = MX.sym('U')\n",
    "    X = X0\n",
    "    Q = 0\n",
    "    for j in range(M):\n",
    "        k1, k1_q = f(X, U)\n",
    "        k2, k2_q = f(X + DT/2 * k1, U)\n",
    "        k3, k3_q = f(X + DT/2 * k2, U)\n",
    "        k4, k4_q = f(X + DT * k3, U)\n",
    "        X=X+DT/6*(k1 +2*k2 +2*k3 +k4)\n",
    "        Q = Q + DT/6*(k1_q + 2*k2_q + 2*k3_q + k4_q)\n",
    "    F = Function('F', [X0, U], [X, Q],['x0','p'],['xf','qf'])\n",
    "\n",
    "# Evaluate at a test point\n",
    "Fk = F(x0=[0.2,0.3],p=0.4)\n",
    "print(Fk['xf'])\n",
    "print(Fk['qf'])\n",
    "\n",
    "# Start with an empty NLP\n",
    "w=[]\n",
    "w0 = []\n",
    "lbw = []\n",
    "ubw = []\n",
    "J = 0\n",
    "g=[]\n",
    "lbg = []\n",
    "ubg = []\n",
    "\n",
    "# \"Lift\" initial conditions\n",
    "Xk = MX.sym('X0', 2)\n",
    "w += [Xk]\n",
    "lbw += [0, 1]\n",
    "ubw += [0, 1]\n",
    "w0 += [0, 1]\n",
    "\n",
    "# Formulate the NLP\n",
    "for k in range(N):\n",
    "    # New NLP variable for the control\n",
    "    Uk = MX.sym('U_' + str(k))\n",
    "    w   += [Uk]\n",
    "    lbw += [-1]\n",
    "    ubw += [1]\n",
    "    w0  += [0]\n",
    "\n",
    "    # Integrate till the end of the interval\n",
    "    Fk = F(x0=Xk, p=Uk)\n",
    "    Xk_end = Fk['xf']\n",
    "    J=J+Fk['qf']\n",
    "\n",
    "    # New NLP variable for state at end of interval\n",
    "    Xk = MX.sym('X_' + str(k+1), 2)\n",
    "    w   += [Xk]\n",
    "    lbw += [-0.25, -inf]\n",
    "    ubw += [  inf,  inf]\n",
    "    w0  += [0, 0]\n",
    "\n",
    "    # Add equality constraint\n",
    "    g   += [Xk_end-Xk]\n",
    "    lbg += [0, 0]\n",
    "    ubg += [0, 0]\n",
    "\n",
    "# Create an NLP solver\n",
    "prob = {'f': J, 'x': vertcat(*w), 'g': vertcat(*g)}\n",
    "solver = nlpsol('solver', 'ipopt', prob);\n",
    "\n",
    "# Solve the NLP\n",
    "sol = solver(x0=w0, lbx=lbw, ubx=ubw, lbg=lbg, ubg=ubg)\n",
    "w_opt = sol['x'].full().flatten()\n",
    "\n",
    "# Plot the solution\n",
    "x1_opt = w_opt[0::3]\n",
    "x2_opt = w_opt[1::3]\n",
    "u_opt = w_opt[2::3]\n",
    "\n",
    "tgrid = [T/N*k for k in range(N+1)]\n",
    "\n",
    "plt.figure(1)\n",
    "plt.clf()\n",
    "plt.plot(tgrid, x1_opt, '--')\n",
    "plt.plot(tgrid, x2_opt, '-')\n",
    "plt.step(tgrid, vertcat(DM.nan(1), u_opt), '-.')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['x1','x2','u'])\n",
    "plt.grid()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pendulum exercise\n",
    "$$\n",
    "\\begin{split}\\begin{array}{lc}\n",
    "\\begin{array}{l}\n",
    "\\text{minimize:} \\\\\n",
    "x(\\cdot) \\in \\mathbb{R}^2, \\, u(\\cdot) \\in \\mathbb{R}\n",
    "\\end{array}\n",
    "\\quad \\displaystyle \\int_{t=0}^{T}{cos(x_1) \\, dt}\n",
    "\\\\\n",
    "\\\\\n",
    "\\text{subject to:} \\\\\n",
    "\\\\\n",
    "\\begin{array}{ll}\n",
    "\\left\\{\n",
    "\\begin{array}{l}\n",
    "\\dot{x}_0 = u - sin(x_1) \\\\\n",
    "\\dot{x}_1 = x_0 \\\\\n",
    "-u_{max} \\le u \\le u_{max} , \\quad\n",
    "\\end{array} \\right. & \\text{for} \\, 0 \\le t \\le T \\\\\n",
    "x_0(0)=0, \\quad x_1(0)=0,\n",
    "\\end{array}\n",
    "\\end{array}\\end{split}\n",
    "$$\n",
    "with $T=10$.\n",
    "\n",
    "siendo $$x_0 = \\theta'$$ $$x_1 = \\theta$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0, 0]\n",
      "0.166667\n",
      "This is Ipopt version 3.12.3, running with linear solver mumps.\n",
      "NOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n",
      "\n",
      "Number of nonzeros in equality constraint Jacobian...:        0\n",
      "Number of nonzeros in inequality constraint Jacobian.:      465\n",
      "Number of nonzeros in Lagrangian Hessian.............:      465\n",
      "\n",
      "Total number of variables............................:       30\n",
      "                     variables with only lower bounds:        0\n",
      "                variables with lower and upper bounds:       30\n",
      "                     variables with only upper bounds:        0\n",
      "Total number of equality constraints.................:        0\n",
      "Total number of inequality constraints...............:       30\n",
      "        inequality constraints with only lower bounds:       30\n",
      "   inequality constraints with lower and upper bounds:        0\n",
      "        inequality constraints with only upper bounds:        0\n",
      "\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "   0  5.0000000e+00 0.00e+00 5.47e-01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n",
      "   1  4.9870680e+00 0.00e+00 8.89e-02  -1.7 1.15e-01    -  9.04e-01 1.00e+00f  1\n",
      "   2  4.9768035e+00 0.00e+00 1.34e-01  -2.5 4.29e-02    -  9.00e-01 1.00e+00h  1\n",
      "   3  4.9414325e+00 0.00e+00 6.86e-02  -2.5 6.78e-02   0.0 1.00e+00 1.00e+00f  1\n",
      "   4  4.7801757e+00 0.00e+00 5.99e-02  -2.5 1.79e-01  -0.5 7.11e-01 1.00e+00f  1\n",
      "   5  4.5906970e+00 0.00e+00 1.02e-01  -2.5 1.11e-01  -0.1 1.00e+00 1.00e+00h  1\n",
      "   6  3.4465981e+00 0.00e+00 2.75e-01  -2.5 1.96e+00  -0.5 1.45e-01 1.78e-01f  1\n",
      "   7  1.3125486e+00 0.00e+00 5.04e-01  -2.5 4.12e+00  -0.1 9.19e-02 8.22e-02f  1\n",
      "   8  1.8505025e+00 0.00e+00 1.73e+00  -2.5 1.89e-01   0.3 3.29e-01 1.00e+00h  1\n",
      "   9 -2.5487146e-02 0.00e+00 2.23e-01  -2.5 4.04e-01  -0.2 3.67e-01 1.00e+00f  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  10 -1.7315020e-01 0.00e+00 2.09e-01  -2.5 9.02e-01  -0.6 4.06e-01 1.03e-01h  1\n",
      "  11 -3.9428075e-01 0.00e+00 2.04e-01  -2.5 2.78e+01    -  3.31e-02 2.31e-02h  1\n",
      "  12 -5.5200312e-01 0.00e+00 1.75e-01  -2.5 4.51e+00    -  3.01e-01 1.46e-01h  1\n",
      "  13 -6.1339337e-01 0.00e+00 1.50e-01  -2.5 3.71e+00    -  2.74e-01 1.44e-01h  1\n",
      "  14 -6.6842740e-01 0.00e+00 1.21e-01  -2.5 2.10e+00    -  6.39e-01 2.01e-01h  1\n",
      "  15 -7.2153742e-01 0.00e+00 1.05e-01  -2.5 1.49e+00    -  1.00e+00 3.80e-01h  1\n",
      "  16 -7.6177073e-01 0.00e+00 8.93e-03  -2.5 6.27e-01    -  1.00e+00 9.33e-01h  1\n",
      "  17 -7.6107750e-01 0.00e+00 1.88e-05  -2.5 2.30e-01    -  1.00e+00 1.00e+00f  1\n",
      "  18 -8.1251578e-01 0.00e+00 6.54e-03  -3.8 3.80e-01    -  7.93e-01 1.00e+00f  1\n",
      "  19 -8.2149374e-01 0.00e+00 1.07e-04  -3.8 2.90e-01    -  1.00e+00 1.00e+00h  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  20 -8.2505300e-01 0.00e+00 3.64e-04  -5.7 1.81e-01    -  8.81e-01 7.01e-01h  1\n",
      "  21 -8.2642508e-01 0.00e+00 8.52e-04  -5.7 1.88e-01    -  6.97e-01 8.74e-01h  1\n",
      "  22 -8.2676798e-01 0.00e+00 3.11e-07  -5.7 9.17e-02    -  1.00e+00 1.00e+00f  1\n",
      "  23 -8.2684381e-01 0.00e+00 3.60e-05  -8.6 3.03e-01    -  6.89e-01 9.99e-01h  1\n",
      "  24 -8.2684670e-01 0.00e+00 8.03e-09  -8.6 5.67e-02    -  1.00e+00 1.00e+00f  1\n",
      "  25 -8.2684681e-01 0.00e+00 1.98e-12  -8.6 2.68e-03    -  1.00e+00 1.00e+00h  1\n",
      "\n",
      "Number of Iterations....: 25\n",
      "\n",
      "                                   (scaled)                 (unscaled)\n",
      "Objective...............:  -8.2684681346028110e-01   -8.2684681346028110e-01\n",
      "Dual infeasibility......:   1.9838020115514610e-12    1.9838020115514610e-12\n",
      "Constraint violation....:   0.0000000000000000e+00    0.0000000000000000e+00\n",
      "Complementarity.........:   2.6048025520541458e-09    2.6048025520541458e-09\n",
      "Overall NLP error.......:   2.6048025520541458e-09    2.6048025520541458e-09\n",
      "\n",
      "\n",
      "Number of objective function evaluations             = 26\n",
      "Number of objective gradient evaluations             = 26\n",
      "Number of equality constraint evaluations            = 0\n",
      "Number of inequality constraint evaluations          = 26\n",
      "Number of equality constraint Jacobian evaluations   = 0\n",
      "Number of inequality constraint Jacobian evaluations = 26\n",
      "Number of Lagrangian Hessian evaluations             = 25\n",
      "Total CPU secs in IPOPT (w/o function evaluations)   =      0.035\n",
      "Total CPU secs in NLP function evaluations           =      0.237\n",
      "\n",
      "EXIT: Optimal Solution Found.\n",
      "      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval\n",
      "       nlp_f  |   7.20ms (277.08us)   7.27ms (279.58us)        26\n",
      "       nlp_g  |   7.28ms (279.81us)   7.28ms (280.00us)        26\n",
      "  nlp_grad_f  |  22.10ms (818.41us)  22.15ms (820.30us)        27\n",
      "  nlp_hess_l  | 158.18ms (  6.33ms) 158.11ms (  6.32ms)        25\n",
      "   nlp_jac_g  |  44.69ms (  1.66ms)  44.80ms (  1.66ms)        27\n",
      "       total  | 290.23ms (290.23ms) 288.34ms (288.34ms)         1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "T = 5. # Time horizon\n",
    "N = 30 # number of control intervals\n",
    "u_m = 1\n",
    "\n",
    "# Declare model variables\n",
    "x1 = MX.sym('x1')\n",
    "x0 = MX.sym('x0')\n",
    "x = vertcat(x0, x1)\n",
    "u = MX.sym('u')\n",
    "\n",
    "# Model equations\n",
    "xdot = vertcat(u-sin(x1), x0)\n",
    "\n",
    "# Objective term\n",
    "L = cos(x1)\n",
    "\n",
    "# Formulate discrete time dynamics\n",
    "if False:\n",
    "    # CVODES from the SUNDIALS suite\n",
    "    dae = {'x':x, 'p':u, 'ode':xdot, 'quad':L}\n",
    "    opts = {'tf':T/N}\n",
    "    F = integrator('F', 'cvodes', dae, opts)\n",
    "else:\n",
    "    # Fixed step Runge-Kutta 4 integrator\n",
    "    M = 4 # RK4 steps per interval\n",
    "    DT = T/N/M\n",
    "    f = Function('f', [x, u], [xdot, L])\n",
    "    X_0 = MX.sym('X_0', 2)\n",
    "    U = MX.sym('U')\n",
    "    X = X_0\n",
    "    Q = 0\n",
    "    for j in range(M):\n",
    "        k1, k1_q = f(X, U)\n",
    "        k2, k2_q = f(X + DT/2 * k1, U)\n",
    "        k3, k3_q = f(X + DT/2 * k2, U)\n",
    "        k4, k4_q = f(X + DT * k3, U)\n",
    "        X=X+DT/6*(k1 +2*k2 +2*k3 +k4)\n",
    "        Q = Q + DT/6*(k1_q + 2*k2_q + 2*k3_q + k4_q)\n",
    "    F = Function('F', [X_0, U], [X, Q],['x_0','p'],['xf','qf'])\n",
    "\n",
    "# Evaluate at a test point\n",
    "Fk = F(x_0=[0.,0.],p=0.)\n",
    "print(Fk['xf'])\n",
    "print(Fk['qf'])\n",
    "\n",
    "# Start with an empty NLP\n",
    "w=[]\n",
    "w0 = []\n",
    "lbw = []\n",
    "ubw = []\n",
    "J = 0\n",
    "g=[]\n",
    "lbg = []\n",
    "ubg = []\n",
    "\n",
    "# Formulate the NLP\n",
    "Xk = MX([0, 0])\n",
    "for k in range(N):\n",
    "    # New NLP variable for the control\n",
    "    Uk = MX.sym('U_' + str(k))\n",
    "    w += [Uk]\n",
    "    lbw += [-u_m]\n",
    "    ubw += [u_m]\n",
    "    w0 += [0]\n",
    "\n",
    "    # Integrate till the end of the interval\n",
    "    Fk = F(x_0=Xk, p=Uk)\n",
    "    Xk = Fk['xf']\n",
    "    J=J+Fk['qf']\n",
    "\n",
    "    # Add inequality constraint\n",
    "    g += [Xk[0]]\n",
    "#    lbg += [-.25]\n",
    "    ubg += [inf]\n",
    "\n",
    "# Create an NLP solver\n",
    "prob = {'f': J, 'x': vertcat(*w), 'g': vertcat(*g)}\n",
    "solver = nlpsol('solver', 'ipopt', prob)\n",
    "\n",
    "# Solve the NLP\n",
    "sol = solver(x0=w0, lbx=lbw, ubx=ubw, lbg=lbg, ubg=ubg)\n",
    "w_opt = sol['x']\n",
    "\n",
    "# Plot the solution\n",
    "u_opt = w_opt\n",
    "x_opt = [[0, 0]]\n",
    "for k in range(N):\n",
    "    Fk = F(x_0=x_opt[-1], p=u_opt[k])\n",
    "    x_opt += [Fk['xf'].full()]\n",
    "x1_opt = [r[0] for r in x_opt]\n",
    "x2_opt = [r[1] for r in x_opt]\n",
    "\n",
    "tgrid = [T/N*k for k in range(N+1)]\n",
    "\n",
    "\n",
    "plt.figure(1)\n",
    "plt.clf()\n",
    "plt.plot(tgrid, x1_opt, '--')\n",
    "plt.plot(tgrid, x2_opt, '-')\n",
    "plt.step(tgrid, vertcat(DM.nan(1), u_opt), '-.')\n",
    "plt.xlabel('t')\n",
    "plt.legend(['x0','x1','u'])\n",
    "plt.grid()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Examples"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "This is Ipopt version 3.12.3, running with linear solver mumps.\n",
      "NOTE: Other linear solvers might be more efficient (see Ipopt documentation).\n",
      "\n",
      "Number of nonzeros in equality constraint Jacobian...:      100\n",
      "Number of nonzeros in inequality constraint Jacobian.:        0\n",
      "Number of nonzeros in Lagrangian Hessian.............:     1275\n",
      "\n",
      "Total number of variables............................:       50\n",
      "                     variables with only lower bounds:        0\n",
      "                variables with lower and upper bounds:       50\n",
      "                     variables with only upper bounds:        0\n",
      "Total number of equality constraints.................:        2\n",
      "Total number of inequality constraints...............:        0\n",
      "        inequality constraints with only lower bounds:        0\n",
      "   inequality constraints with lower and upper bounds:        0\n",
      "        inequality constraints with only upper bounds:        0\n",
      "\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "   0  8.0000000e+00 6.00e+00 2.18e-01  -1.0 0.00e+00    -  0.00e+00 0.00e+00   0\n",
      "   1  4.4571215e+00 1.99e+00 7.48e+00  -1.0 1.36e+00    -  7.29e-02 6.56e-01f  1\n",
      "   2  6.2675183e+00 1.36e-01 1.12e+00  -1.0 3.67e-01    -  7.14e-01 1.00e+00h  1\n",
      "   3  5.8176525e+00 3.50e-03 1.63e-02  -1.0 5.62e-02    -  1.00e+00 1.00e+00f  1\n",
      "   4  5.7290277e+00 1.54e-03 1.37e-01  -2.5 3.52e-02    -  8.92e-01 1.00e+00f  1\n",
      "   5  5.6471420e+00 2.49e-03 9.22e-04  -2.5 4.57e-02    -  1.00e+00 1.00e+00f  1\n",
      "   6  5.6147815e+00 5.89e-04 1.03e-02  -3.8 2.19e-02    -  9.09e-01 1.00e+00h  1\n",
      "   7  5.6049266e+00 7.09e-05 6.43e-05  -3.8 9.85e-03    -  1.00e+00 1.00e+00h  1\n",
      "   8  5.6017752e+00 1.26e-05 9.10e-04  -5.7 6.58e-03    -  9.58e-01 1.00e+00h  1\n",
      "   9  5.6012230e+00 1.08e-06 2.81e-06  -5.7 3.63e-03    -  1.00e+00 1.00e+00h  1\n",
      "iter    objective    inf_pr   inf_du lg(mu)  ||d||  lg(rg) alpha_du alpha_pr  ls\n",
      "  10  5.6011546e+00 1.34e-07 3.79e-07  -5.7 1.88e-03    -  1.00e+00 1.00e+00h  1\n",
      "  11  5.6011333e+00 2.45e-08 4.36e-06  -8.6 9.00e-04    -  9.98e-01 1.00e+00h  1\n",
      "  12  5.6011327e+00 2.19e-09 3.47e-09  -8.6 2.62e-04    -  1.00e+00 1.00e+00h  1\n",
      "  13  5.6011327e+00 2.06e-11 3.01e-11  -8.6 2.55e-05    -  1.00e+00 1.00e+00h  1\n",
      "  14  5.6011326e+00 2.84e-14 4.77e-14 -11.0 6.98e-07    -  1.00e+00 1.00e+00h  1\n",
      "\n",
      "Number of Iterations....: 14\n",
      "\n",
      "                                   (scaled)                 (unscaled)\n",
      "Objective...............:   5.6011326312042575e+00    5.6011326312042575e+00\n",
      "Dual infeasibility......:   4.7693069538691396e-14    4.7693069538691396e-14\n",
      "Constraint violation....:   2.8421709430404007e-14    2.8421709430404007e-14\n",
      "Complementarity.........:   1.0058102733268378e-11    1.0058102733268378e-11\n",
      "Overall NLP error.......:   1.0058102733268378e-11    1.0058102733268378e-11\n",
      "\n",
      "\n",
      "Number of objective function evaluations             = 15\n",
      "Number of objective gradient evaluations             = 15\n",
      "Number of equality constraint evaluations            = 15\n",
      "Number of inequality constraint evaluations          = 0\n",
      "Number of equality constraint Jacobian evaluations   = 15\n",
      "Number of inequality constraint Jacobian evaluations = 0\n",
      "Number of Lagrangian Hessian evaluations             = 14\n",
      "Total CPU secs in IPOPT (w/o function evaluations)   =      0.017\n",
      "Total CPU secs in NLP function evaluations           =      0.095\n",
      "\n",
      "EXIT: Optimal Solution Found.\n",
      "      solver  :   t_proc      (avg)   t_wall      (avg)    n_eval\n",
      "       nlp_f  |  57.00us (  3.80us)  53.00us (  3.53us)        15\n",
      "       nlp_g  |   1.38ms ( 92.27us)   1.39ms ( 92.67us)        15\n",
      "  nlp_grad_f  |  64.00us (  4.00us)  61.00us (  3.81us)        16\n",
      "  nlp_hess_l  |  89.44ms (  6.39ms)  89.26ms (  6.38ms)        14\n",
      "   nlp_jac_g  |   4.20ms (262.37us)   4.21ms (262.94us)        16\n",
      "       total  | 127.46ms (127.46ms) 125.88ms (125.88ms)         1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Control\n",
    "u = MX.sym(\"u\")\n",
    "\n",
    "# State\n",
    "x = MX.sym(\"x\",3)\n",
    "s = x[0] # position\n",
    "v = x[1] # speed\n",
    "m = x[2] # mass\n",
    "\n",
    "# ODE right hand side\n",
    "sdot = v\n",
    "vdot = (u - 0.05 * v*v)/m\n",
    "mdot = -0.1*u*u\n",
    "xdot = vertcat(sdot,vdot,mdot)\n",
    "\n",
    "# ODE right hand side function\n",
    "f = Function('f', [x,u],[xdot])\n",
    "\n",
    "# Integrate with Explicit Euler over 0.2 seconds\n",
    "dt = 0.01  # Time step\n",
    "xj = x\n",
    "for j in range(20):\n",
    "    fj = f(xj,u)\n",
    "    xj += dt*fj\n",
    "\n",
    "# Discrete time dynamics function\n",
    "F = Function('F', [x,u],[xj])\n",
    "\n",
    "# Number of control segments\n",
    "nu = 50 \n",
    "\n",
    "# Control for all segments\n",
    "U = MX.sym(\"U\",nu) \n",
    " \n",
    "# Initial conditions\n",
    "X0 = MX([0,0,1])\n",
    "\n",
    "# Integrate over all intervals\n",
    "X=X0\n",
    "for k in range(nu):\n",
    "    X = F(X,U[k])\n",
    "\n",
    "# Objective function and constraints\n",
    "J = mtimes(U.T,U) # u'*u in Matlab\n",
    "G = X[0:2]     # x(1:2) in Matlab\n",
    "\n",
    "# NLP\n",
    "nlp = {'x':U, 'f':J, 'g':G}\n",
    " \n",
    "# Allocate an NLP solver\n",
    "opts = {\"ipopt.tol\":1e-10, \"expand\":True}\n",
    "solver = nlpsol(\"solver\", \"ipopt\", nlp, opts)\n",
    "arg = {}\n",
    "\n",
    "# Bounds on u and initial condition\n",
    "arg[\"lbx\"] = -0.5\n",
    "arg[\"ubx\"] =  0.5\n",
    "arg[\"x0\"] =   0.4\n",
    "\n",
    "# Bounds on g\n",
    "arg[\"lbg\"] = [10,0]\n",
    "arg[\"ubg\"] = [10,0]\n",
    "\n",
    "# Solve the problem\n",
    "res = solver(**arg)\n",
    "\n",
    "# Get the solution\n",
    "plt.plot(res[\"x\"])\n",
    "plt.plot(res[\"lam_x\"])\n",
    "plt.grid()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'f': DM(5.60113),\n",
       " 'g': DM([10, -1.42421e-14]),\n",
       " 'lam_g': DM([-1.08265, 5.01133]),\n",
       " 'lam_p': DM([]),\n",
       " 'lam_x': DM([0.210668, 0.164185, 0.119534, 0.0766077, 0.0352998, 3.75497e-09, 3.50414e-10, 1.84892e-10, 1.2532e-10, 9.44397e-11, 7.54144e-11, 6.24196e-11, 5.29054e-11, 4.55784e-11, 3.97126e-11, 3.4869e-11, 3.07664e-11, 2.72161e-11, 2.40866e-11, 2.12831e-11, 1.87351e-11, 1.6389e-11, 1.42024e-11, 1.2141e-11, 1.0176e-11, 8.28224e-12, 6.43684e-12, 4.6179e-12, 2.80344e-12, 9.70292e-13, -9.07138e-13, -2.85833e-12, -4.91856e-12, -7.13148e-12, -9.55289e-12, -1.22562e-11, -1.53412e-11, -1.89476e-11, -2.32788e-11, -2.86434e-11, -3.55342e-11, -4.47907e-11, -5.79689e-11, -7.83135e-11, -1.13896e-10, -1.91889e-10, -4.96875e-10, -0.0151166, -0.0626596, -0.107781]),\n",
       " 'x': DM([0.5, 0.5, 0.5, 0.5, 0.5, 0.497328, 0.474746, 0.453265, 0.432716, 0.412943, 0.393802, 0.375159, 0.35689, 0.338877, 0.321013, 0.303192, 0.285318, 0.267299, 0.249047, 0.230481, 0.211523, 0.192101, 0.172148, 0.151603, 0.130411, 0.108524, 0.0859013, 0.0625094, 0.0383253, 0.0133351, -0.0124636, -0.0390617, -0.0664371, -0.0945538, -0.123361, -0.152793, -0.182766, -0.213181, -0.243922, -0.274855, -0.305829, -0.336674, -0.367208, -0.397231, -0.426529, -0.454878, -0.482042, -0.5, -0.5, -0.5])}"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "res"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
